// ==UserScript==
// @name         aldi
// @namespace    http://tampermonkey.net/
// @version      1.5
// @description  Convert weights from ounces to pounds and append prices per pound on ALDI pages, handling both ounces and pounds weights, and ignoring prices already listed per pound
// @author       Your Name
// @match        *://*.aldi.us/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Helper function to convert ounces to pounds
    function convertOuncesToPounds(ounces) {
        return (ounces / 16).toFixed(2);
    }

    // Helper function to convert price per ounce to price per pound in dollars
    function convertPricePerOunceToPricePerPound(pricePerOunce) {
        return (pricePerOunce * 16).toFixed(2);
    }

    // Function to parse weight text and return total ounces
    function parseWeight(weightText) {
        let totalOunces = 0;
        let match = weightText.match(/(\d+)\s?x\s?([\d\.]+)\s?oz/);
        if (match) {
            let quantity = parseFloat(match[1]);
            let ounces = parseFloat(match[2]);
            totalOunces = quantity * ounces;
        } else {
            match = weightText.match(/([\d\.]+)\s?oz/);
            if (match) {
                totalOunces = parseFloat(match[1]);
            }
        }
        return totalOunces;
    }

    // Function to update the prices per pound and weights
    function updatePage() {
        // Update prices per pound
        let priceElements = document.querySelectorAll('.product-tile__price');

        priceElements.forEach(priceElement => {
            // Check if the price is already listed per pound
            if (priceElement.innerText.includes('/lb')) {
                return; // Skip this element
            }

            let productTile = priceElement.closest('.product-tile');
            let weightElement = productTile.querySelector('.product-detail');

            if (weightElement) {
                let weightText = weightElement.innerText;
                let totalOunces = parseWeight(weightText);
                let weightInPounds = convertOuncesToPounds(totalOunces);

                if (totalOunces > 0) {
                    let priceText = priceElement.innerText.match(/\$([\d\.]+)\s?/);
                    if (priceText) {
                        let price = parseFloat(priceText[1]);
                        let pricePerPound = (price / weightInPounds).toFixed(2);

                        // Append the price per pound text
                        priceElement.innerHTML += ` ($${pricePerPound}/lb)`;

                        // Apply important CSS
                        priceElement.style.setProperty('color', 'red', 'important');
                    }
                }
            }
        });

        // Update weights from ounces to pounds
        let weightElements = document.querySelectorAll('.product-detail');

        weightElements.forEach(element => {
            let weightText = element.innerText;
            let totalOunces = parseWeight(weightText);
            if (totalOunces > 0) {
                let pounds = convertOuncesToPounds(totalOunces);

                // Update the weight text directly
                element.innerText = element.innerText.replace(/([\d\.]+)\s?oz/, `${pounds} lbs`);

                // Apply important CSS
                element.style.setProperty('color', 'red', 'important');
            }
        });
    }

    // Function to debounce the updatePage function
    function debounce(func, timeout) {
        let timer;
        return function() {
            clearTimeout(timer);
            timer = setTimeout(func, timeout);
        };
    }

    // Run the function when the page loads
    window.addEventListener('load', updatePage);

    // Debounced mutation observer to observe changes in the body
    let debouncedUpdate = debounce(() => {
        updatePage();
    }, 500); // Adjust debounce timeout as needed (500ms in this example)

    let observer = new MutationObserver(debouncedUpdate);
    observer.observe(document.body, { childList: true, subtree: true });

})();
