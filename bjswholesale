// ==UserScript==
// @name         bjs
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  Converts weights and prices, and makes them red or light blue text on the webpage
// @author       You
// @match        *://*.bjs.com/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // Helper function to convert ounces to pounds
    function convertOuncesToPounds(ounces) {
        return (ounces / 16).toFixed(2);
    }

    // Helper function to convert fluid ounces to gallons
    function convertFluidOuncesToGallons(fluidOunces) {
        return (fluidOunces / 128).toFixed(2);
    }

    // Helper function to convert price per fluid ounce to price per gallon in dollars
    function convertPricePerFluidOunceToPricePerGallon(pricePerFluidOunce) {
        return (pricePerFluidOunce * 128).toFixed(2);
    }

    // Function to wait for element presence
    function waitForElement(selector, callback) {
        if (document.querySelector(selector)) {
            callback();
        } else {
            setTimeout(function() {
                waitForElement(selector, callback);
            }, 500);
        }
    }

    // Function to update the prices per ounce to per pound and per fluid ounce to per gallon
    function updatePrices() {
        // Select specific elements that contain price information
        let priceElements = document.querySelectorAll('.new-plp.product-card .price, .new-plp.product-card .price-range');

        priceElements.forEach(priceElement => {
            // Check if the price is already listed per pound or per gallon
            if (priceElement.innerText.includes('/lb') || priceElement.innerText.includes('/gal')) {
                return; // Skip this element
            }

            let productCard = priceElement.closest('.new-plp.product-card');
            let weightElement = productCard.querySelector('.title-new-plp p');

            if (weightElement) {
                let weightText = weightElement.innerText;
                let ouncesMatch = weightText.match(/(\d+\.?\d*)\s?oz/);
                let fluidOuncesMatch = weightText.match(/(\d+\.?\d*)\s?fl\s?\.?\s?oz/);
                let poundsMatch = weightText.match(/(\d+\.?\d*)\s?lb/);
                let countMatch = weightText.match(/(\d+)\s?(ct|pk)\.\s?\/\s?(\d+\.?\d*)\s?oz/);
                let weightRangeMatch = weightText.match(/(\d+\.?\d*)\s?-\s?(\d+\.?\d*)\s?(lbs|lb)/);
                let simpleWeightRangeMatch = weightText.match(/(\d+\.?\d*)\s?-\s?(\d+\.?\d*)/);
                let weightInPounds, weightInGallons;

                if (countMatch) {
                    let count = parseInt(countMatch[1]);
                    let weightPerItemInOunces = parseFloat(countMatch[3]);
                    let totalWeightInOunces = count * weightPerItemInOunces;
                    weightInPounds = convertOuncesToPounds(totalWeightInOunces);
                } else if (weightRangeMatch) {
                    // Extract minimum weight from range
                    weightInPounds = parseFloat(weightRangeMatch[1]);
                } else if (simpleWeightRangeMatch) {
                    // Extract minimum weight from range
                    weightInPounds = parseFloat(simpleWeightRangeMatch[1]);
                } else if (ouncesMatch) {
                    let ounces = parseFloat(ouncesMatch[1]);
                    weightInPounds = convertOuncesToPounds(ounces);
                } else if (fluidOuncesMatch) {
                    let fluidOunces = parseFloat(fluidOuncesMatch[1]);
                    weightInGallons = convertFluidOuncesToGallons(fluidOunces);
                } else if (poundsMatch) {
                    weightInPounds = parseFloat(poundsMatch[1]);
                } else {
                    return; // Skip if weight is not found
                }

                let priceRangeMatch = priceElement.innerText.match(/\$([\d\.]+)\s?-\s?\$([\d\.]+)/);
                let priceMatch = priceElement.innerText.match(/\$([\d\.]+)\s?/);
                let price;

                if (priceRangeMatch) {
                    // Extract minimum price from range
                    price = parseFloat(priceRangeMatch[1]);
                } else if (priceMatch) {
                    price = parseFloat(priceMatch[1]);
                } else {
                    return; // Skip if price is not found
                }

                if (weightInPounds) {
                    let pricePerPound = (price / weightInPounds).toFixed(2);
                    // Append the price per pound text
                    priceElement.innerHTML += ` ($${pricePerPound}/lb)`;
                    // Apply important CSS
                    priceElement.style.setProperty('color', 'red', 'important');
                } else if (weightInGallons) {
                    let pricePerFluidOunce = price / (weightInGallons * 128);
                    let pricePerGallon = convertPricePerFluidOunceToPricePerGallon(pricePerFluidOunce);
                    // Append the price per gallon text
                    priceElement.innerHTML += ` ($${pricePerGallon}/gal)`;
                    // Apply important CSS
                    priceElement.style.setProperty('color', 'lightblue', 'important');
                }
            }
        });
    }

    // Function to update the weights from ounces to pounds and fluid ounces to gallons
    function updateWeights() {
        // Select specific elements that contain weight information
        let weightElements = document.querySelectorAll('.title-new-plp p');

        weightElements.forEach(element => {
            let weightText = element.innerText;
            let ouncesMatch = weightText.match(/(\d+\.?\d*)\s?oz/);
            let fluidOuncesMatch = weightText.match(/(\d+\.?\d*)\s?fl\s?\.?\s?oz/);
            let countMatch = weightText.match(/(\d+)\s?(ct|pk)\.\s?\/\s?(\d+\.?\d*)\s?oz/);
            let weightRangeMatch = weightText.match(/(\d+\.?\d*)\s?-\s?(\d+\.?\d*)\s?(lbs|lb)/);
            let simpleWeightRangeMatch = weightText.match(/(\d+\.?\d*)\s?-\s?(\d+\.?\d*)/);

            if (countMatch) {
                let count = parseInt(countMatch[1]);
                let weightPerItemInOunces = parseFloat(countMatch[3]);
                let totalWeightInOunces = count * weightPerItemInOunces;
                let totalWeightInPounds = convertOuncesToPounds(totalWeightInOunces);

                // Update the weight text directly
                element.innerHTML = element.innerHTML.replace(/(\d+)\s?(ct|pk)\.\s?\/\s?(\d+\.?\d*)\s?oz/, `${totalWeightInPounds} lbs`);

                // Apply important CSS
                element.style.setProperty('color', 'red', 'important');
            } else if (weightRangeMatch) {
                let minWeight = parseFloat(weightRangeMatch[1]);
                let maxWeight = parseFloat(weightRangeMatch[2]);

                // Update the weight text directly
                element.innerHTML = element.innerHTML.replace(/(\d+\.?\d*)\s?-\s?(\d+\.?\d*)\s?(lbs|lb)/, `${minWeight} - ${maxWeight} lbs`);

                // Apply important CSS
                element.style.setProperty('color', 'red', 'important');
            } else if (simpleWeightRangeMatch) {
                let minWeight = parseFloat(simpleWeightRangeMatch[1]);
                let maxWeight = parseFloat(simpleWeightRangeMatch[2]);

                // Update the weight text directly
                element.innerHTML = element.innerHTML.replace(/(\d+\.?\d*)\s?-\s?(\d+\.?\d*)/, `${minWeight} - ${maxWeight} lbs`);

                // Apply important CSS
                element.style.setProperty('color', 'red', 'important');
            } else if (ouncesMatch) {
                let ounces = parseFloat(ouncesMatch[1]);
                let pounds = convertOuncesToPounds(ounces);
                // Update the weight text directly
                element.innerHTML = element.innerHTML.replace(/(\d+\.?\d*)\s?oz/, `${pounds} lbs`);

                // Apply important CSS
                element.style.setProperty('color', 'red', 'important');
            } else if (fluidOuncesMatch) {
                let fluidOunces = parseFloat(fluidOuncesMatch[1]);
                let gallons = convertFluidOuncesToGallons(fluidOunces);
                // Update the weight text directly
                element.innerHTML = element.innerHTML.replace(/(\d+\.?\d*)\s?fl\s?\.?\s?oz/, `${gallons} gal`);

                // Apply important CSS
                element.style.setProperty('color', 'lightblue', 'important');
            } else if (weightText.match(/(\d+\.?\d*)\s?lbs/)) {
                // Ensure existing lbs weights are also red
                element.style.setProperty('color', 'red', 'important');
            } else if (weightText.match(/(\d+\.?\d*)\s?gal/)) {
                // Ensure existing gallons weights are also light blue
                element.style.setProperty('color', 'lightblue', 'important');
            }
        });
    }

    // Function to debounce the updatePage function
    function debounce(func, timeout) {
        let timer;
        return function() {
            clearTimeout(timer);
            timer = setTimeout(func, timeout);
        };
    }

    // Function to update the prices and weights on the page
    function updatePage() {
        updatePrices();
        updateWeights();
    }

    // Run the function when the page loads
    window.addEventListener('load', updatePage);

    // Debounced mutation observer to observe changes in the body
    let debouncedUpdate = debounce(() => {
        updatePage();
    }, 500); // Adjust debounce timeout as needed (500ms in this example)

    let observer = new MutationObserver(debouncedUpdate);
    observer.observe(document.body, { childList: true, subtree: true });

})();
